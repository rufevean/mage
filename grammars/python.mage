# Should be part of standard library

any_byte = [\x00-\xFF]

any_char = [\x00-\x7F]

eof = !any_byte

extern token indent

# Helper utilities

@skip
token skip = [\s]+

token eol = '\r\n' | '\n'

token eolf = eol | eof

token eos
  = __ ';'
  | _ line_comment? eol
  | __ eof

# First tokens

@keyword
pub token ident
  = [a-zA-Z_] [a-zA-Z_0-9]*

pub token integer -> Integer
   = [1-9] [0-9]*
   | '0'+

pub token float -> Float
   = [0-9]* '.' [0-9]+

char = any_char

pub token string
   = '"' char* '"'
   | '\'' char* '\''

# General syntax

pub slice
   = lower:expr ':' upper:expr

# Patterns

pub pattern
  = named_pattern
  | attr_pattern
  | subscript_pattern
  | starred_pattern
  | list_pattern
  | tuple_pattern

pub named_pattern
  = name:ident

pub attr_pattern
  = pattern '.' name:ident

pub subscript_pattern
  = pattern '[' slices:((pattern | slice) % ',') ']'

pub starred_pattern
  = '*' expr

pub list_pattern
  = '[' (pattern % ',') ']'

pub tuple_pattern
  = '(' (pattern % ',') ')'

# Expressions

pub expr
  = attr_expr
  | call_expr
  | infix_expr
  | list_expr
  | named_expr
  | nest_expr
  | prefix_expr
  | starred_expr
  | subscript_expr
  | tuple_expr

pub const_expr
   = string
   | float
   | integer

pub nest_expr
  = '(' expr ')'

pub named_expr
  = name:ident

pub attr_expr
  = expr '.' name:ident

pub subscript_expr
  = expr '[' slices:((expr | slice) % ',') ']'

pub starred_expr
  = '*' expr

pub list_expr
  = '[' (expr % ',') ']'

pub tuple_expr
  = '(' (expr % ',') ')'

pub arg
  = pos_arg
  | keyword_arg

pub pos_arg
  = expr

pub keyword_arg
  = name:ident '=' expr

pub call_expr
  = operator:expr '(' args:(arg % ',')  ')'

pub prefix_op
  = 'not'
  | '+'
  | '-'
  | '~'

pub prefix_expr
  = prefix_op expr

pub infix_op
  = '+'
  | '-'
  | '*'
  | '/'
  | '//'
  | '%'
  | '<<'
  | '>>'
  | '|'
  | '^'
  | '&'
  | '@'
  | 'or'
  | 'and'
  | '=='
  | '!='
  | '<'
  | '<='
  | '>'
  | '>='
  | 'is'
  | 'is' 'not'
  | 'in'
  | 'not' 'in'

pub infix_expr
  = left:expr infix_op right:expr

# Statements

pub stmt
  = ret_stmt
  | expr_stmt

pub ret_stmt
  = 'return' expr \eos

pub expr_stmt
  = expr \eos

pub assign_stmt
  = pattern annotation:(':' expr)? '=' expr

pub delete_stmt
  = 'del' pattern

pub raise_stmt
  = 'raise' expr cause:('form' expr)?

pub type_alias_stmt
  = 'type' name:ident type_params:('[' (expr % ',') ']')? '=' expr

pub class_def
  = 'class' name:ident ('(' expr ')') ':' body:(stmt | \indent body:(stmt \eolf)* \dedent)

pub param
  = pos_param
  | rest_pos_param
  | rest_keyword_param

pub pos_param
  = name:ident annotation:(':' expr)? default:('=' expr)?

pub rest_pos_param
  = '*' name:ident

pub rest_keyword_param
  = '**' name:ident

pub func_def
  = 'async'? 'def' name:ident '(' params:(param % ',') ')' return_type:('->' expr)? ':' body:(stmt | \indent (stmt \eolf)* \dedent)

