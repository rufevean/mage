
from .cst import *

EOF = '\uFFFF'

class ScanError(RuntimeError):
    pass

class LineColumn:

    def __init__(self, line: int, column: int) -> None:
        self.line = line
        self.column = column

def _parse_string(buffer: str) -> str:
    return buffer

def _parse_integer(buffer: str) -> int:
    return int(buffer)

def _parse_float(buffer: str) -> float:
    return float(buffer)

class {{lexer_class_name}}:

    def __init__(self, text: str, start_offset = 0, start_line = 1, start_column = 1) -> None:
        self._text = text
        self._curr_offset = start_offset
        {% if enable_linecol %}
        self._curr_pos = LineColumn(start_line, start_column)
        {% endif %}

    def _char_at(self, offset: int) -> str:
        return self._text[offset] if offset < len(self._text) else EOF

    def _peek_char(self, offset = 0) -> str:
        k = self._curr_offset + offset
        return self._text[k] if k < len(self._text) else EOF

    def at_eof(self) -> bool:
        return self._curr_offset >= len(self._text)

    def _get_char(self) -> str:
        if self._curr_offset >= len(self._text):
            return EOF
        ch = self._text[self._curr_offset]
        self._curr_offset += 1
        {% if enable_linecol %}
        if ch == '\n':
            self._curr_pos.line += 1
            self._curr_pos.column = 1
        else:
            self._curr_pos.column += 1
        {% endif %}
        return ch

    def lex(self) -> {{token_class_name}}:
        {{lexer_logic()}}

